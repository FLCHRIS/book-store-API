generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String
  lastName  String
  email     String     @unique
  password  String
  role      Role       @default(CUSTOMER)
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  deletedAt DateTime?
  orders    Order[]
  favorites Favorite[]
}

model Book {
  id          Int         @id @default(autoincrement())
  title       String
  author      String
  publisher   String
  year        Int
  price       Float
  stock       Int         @default(0)
  description String      @db.Text
  genreId     Int
  imageId     Int         @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  orderItems  OrderItem[]
  favorites   Favorite[]
  genre       Genre       @relation(fields: [genreId], references: [id])
  image       BookImage   @relation(fields: [imageId], references: [id])
}

model BookImage {
  id       Int    @id @default(autoincrement())
  publicId String
  url      String
  book     Book?
}

model Genre {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

model Favorite {
  id     Int  @id @default(autoincrement())
  userId Int
  bookId Int
  user   User @relation(fields: [userId], references: [id])
  book   Book @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
}

model Order {
  id          Int         @id @default(autoincrement())
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  userId      Int
  orderItems  OrderItem[]
  payment     Payment[]
  user        User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  quantity Int
  price    Float
  orderId  Int
  bookId   Int
  book     Book  @relation(fields: [bookId], references: [id])
  order    Order @relation(fields: [orderId], references: [id])
}

model Payment {
  id      Int      @id @default(autoincrement())
  amount  Float
  paidAt  DateTime @default(now())
  orderId Int
  order   Order    @relation(fields: [orderId], references: [id])
}
